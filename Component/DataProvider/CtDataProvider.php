<?php

namespace CTLib\Component\DataProvider;

use CTLib\Util\Arr;

/**
 * Facilitates retrieving and processing data
 * results into structured data.
 *
 * @author David McLean <dmclean@celltrak.com>
 */
class CtDataProvider
{
    /**
     * @var DataInputInterface
     */
    protected $input;

    /**
     * @var DataOutputInterface
     */
    protected $output;

    /**
     * @var array
     */
    protected $transforms;


    /**
     * DataProvider constructor.
     *
     * @param DataInputInterface  $input
     * @param DataOutputInterface $output
     */
    public function __construct(
        DataInputInterface $input,
        DataOutputInterface $output
    ) {
        $this->input         = $input;
        $this->output        = $output;
        $this->transforms    = [];
        $this->onRecordAdded = null;
    }

    /**
     * Method to facilitate adding additional data
     * not supplied by the data access input.
     *
     * @param $transform
     */
    public function addRecordTransform($transform)
    {
        $this->transforms[] = $transform;
    }

    /**
     * Get transformed data retrieved from data source.
     * Output will be whatever is generated by the
     * data output class.
     *
     * @return mixed
     */
    public function getResult()
    {
        $data = $this->input->getData();

        $this->output->start($this->input);

        foreach ($data as $record) {
            $this->applyRecordTransforms($record);
            $this->output->addRecord($record);

            if ($this->onRecordAdded) {
                call_user_func($this->onRecordAdded($record, $this->output));
            }
        }

        return $this->output->end($this->input);
    }

    /**
     * @param array $record
     */
    protected function applyRecordTransforms(&$record)
    {
        $context = [];

        foreach ($this->transforms as $transform) {
            call_user_func($transform, $record, $context, $this->output);
        }
    }

}
