<?php

namespace CTLib\Component\DataAccess;

use CTLib\Util\Arr;

/**
 * Facilitates retrieving and processing data
 * results into structured data.
 *
 * @author David McLean <dmclean@celltrak.com>
 */
class DataProvider
{
    /**
     * @var array
     */
    protected $fields;

    /**
     * @var DataAccessInterface
     */
    protected $dataAccess;


    /**
     * DataProvider constructor.
     *
     * @param DataAccessInterface  $dataAccess
     */
    public function __construct(DataAccessInterface $dataAccess)
    {
        $this->fields        = [];
        $this->dataAccess    = $dataAccess;
        $this->onRecordAdded = null;
    }

    /**
     * @param $method
     *
     * @throws \Exception
     */
    public function setOnRecordAdded($method)
    {
        if (!is_callable($method)) {
            throw new \Exception("$method must be callable");
        }
        $this->onRecordAdded = $method;
    }

    /**
     * Method to facilitate field management between
     * the data retrieval and the final output result.
     *
     * @param $field string|callable
     * $param $alias string
     *
     * @return DataProvider
     *
     * @throws \Exception
     */
    public function addField($field, $alias=null)
    {
        if (is_callable($field) && !$alias) {
            throw new \Exception('alias is required for callable');
        }

        if (!$alias) {
            $alias = $field;
        }

        $this->fields[$alias] = $field;

        if (!is_callable($field)) {
            $this->dataAccess->addField($field);
        }

        return $this;
    }

    /**
     * Adds filter criteria to our data access.
     *
     * @param string $field
     * @param mixed $value
     * @param string $operator
     *
     * @return DataProvider
     */
    public function addFilter($field, $value, $operator='eq')
    {
        $this->dataAccess->addFilter($field, $value, $operator);
        return $this;
    }

    /**
     * Add a sort to our data access.
     *
     * @param string      $field
     * @param string      $order
     *
     * @return DataProvider
     */
    public function addSort($field, $order)
    {
        $this->dataAccess->addSort($field, $order);
        return $this;
    }

    /**
     * Get transformed data retrieved from data source.
     * Output will be whatever is generated by the
     * data output class.
     *
     * @param DataOutputInterface $output
     *
     * @return mixed
     */
    public function getResult(DataOutputInterface $output)
    {
        $data = $this->dataAccess->getData();

        $output->start(array_keys($this->fields));

        foreach ($data as $record) {
            $this->applyRecordTransform($record, $output);
            $output->addRecord($record);

            if ($this->onRecordAdded) {
                call_user_func($this->onRecordAdded, $record, $output);
            }
        }

        return $output->end(array_keys($this->fields));
    }

    /**
     * @param array               $record
     * @param DataOutputInterface $output
     */
    protected function applyRecordTransform(&$record, $output)
    {
        $context = [];

        foreach ($this->fields as $transform) {
            if (is_callable($transform)) {
                call_user_func($transform, $record, $context, $output);
            }
        }
    }
}
