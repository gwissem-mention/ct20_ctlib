<?php

namespace CTLib\Component\DataAccess;

use CTLib\Util\Arr;

/**
 * Facilitates retrieving and processing data
 * results into structured data.
 *
 * @author David McLean <dmclean@celltrak.com>
 */
class DataProvider
{
    /**
     * @var array
     */
    protected $transforms;


    /**
     * DataProvider constructor.
     *
     */
    public function __construct() {
        $this->transforms    = [];
        $this->onRecordAdded = null;
    }

    /**
     * @param $method
     */
    public function setOnRecordAdded($method)
    {
        $this->onRecordAdded = $method;
    }

    /**
     * Method to facilitate adding additional data
     * not supplied by the data access input.
     *
     * @param $transform
     *
     * @throws \Exception
     */
    public function addRecordTransform($transform)
    {
        if (!is_callable($transform)) {
            throw new \Exception("$transform must be callable");
        }

        $this->transforms[] = $transform;
    }

    /**
     * Get transformed data retrieved from data source.
     * Output will be whatever is generated by the
     * data output class.
     *
     * @param DataAccessInterface  $input
     * @param DataOutputInterface $output
     *
     * @return mixed
     */
    public function getResult(
        DataAccessInterface $input,
        DataOutputInterface $output
    ) {
        $data = $input->getData();

        $output->start($input);

        foreach ($data as $record) {
            $this->applyRecordTransforms($record, $output);
            $output->addRecord($record);

            if ($this->onRecordAdded) {
                call_user_func($this->onRecordAdded, $record, $output);
            }
        }

        return $output->end($input);
    }

    /**
     * @param array               $record
     * @param DataOutputInterface $output
     */
    protected function applyRecordTransforms(&$record, $output)
    {
        $context = [];

        foreach ($this->transforms as $transform) {
            call_user_func($transform, $record, $context, $output);
        }
    }

}
