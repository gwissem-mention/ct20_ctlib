<?php
namespace CTLib\Tests\Util;

use CTLib\Util\CTDateTime;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-02-11 at 14:27:27.
 */
class CTDateTimeTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var CTDateTime
     */
    protected $ctDateTime;

    /**
     * Sets up the fixture, for example, opens a network connection.
     *
     * This method is called before a test is executed.
     *
     * @return void
     */
    protected function setUp()
    {
        $this->ctDateTime = new CTDateTime;
    }


    /**
     * Test the getDateRange function.
     *
     * NOTE This test failed when using America/Chicago as the timezone
     * and we have just experienced a DST shift.
     *
     * @group unit
     * @covers CTLib\Util\CTDateTime::getRange
     * @covers CTLib\Util\CTDateTime::getRangeWithEndTime
     * @covers CTLib\Util\CTDateTime::getRangeWithInterval
     * @return void
     */
    public function testGetDateRange()
    {
        // test start/end option
        $dates = CTDateTime::getRange('today', 'tomorrow', 'America/Chicago');
        $this->assertEquals($dates[0]+86400, $dates[1]);
        $dates = CTDateTime::getRange('today', '12:00 PM', 'America/Chicago');
        $this->assertEquals($dates[0]+43200, $dates[1]);

        // test start/interval option
        $dates = CTDateTime::getRange('midnight', 'PT23H59M59S', 'America/Chicago');
        $this->assertEquals($dates[0]+86399, $dates[1]);
        $dates = CTDateTime::getRange(
            'midnight -30 days -1 second',
            'midnight -1 second',
            'GMT'
        );
        $this->assertEquals($dates[0]+(30*24*60*60), $dates[1]);
    }

    /**
     * Test the currentTimestamp function.
     *
     * Should always be GMT/UTC.
     *
     * @group unit
     * @covers CTLib\Util\CTDateTime::getRange
     * @covers CTLib\Util\CTDateTime::getRangeWithEndTime
     * @covers CTLib\Util\CTDateTime::getRangeWithInterval
     * @return void
     */
    public function testCurrentTimestamp()
    {
        // test start/end option
        $this->assertEquals(
            CTDateTime::getCurrentTimestamp(),
            date('U')
        );

    }

    /**
     * Test the getRangeWithInterval function.
     *
     * @group unit
     * @return void
     */
    public function testGetRangeWithInterval()
    {
        $tz = date_default_timezone_get();
        date_default_timezone_set('America/Chicago');

        $range = CTDateTime::getRangeWithInterval('January 2', 'PT4H', 'America/Chicago');
        $this->assertEquals(strtotime('Jan 2'), $range[0]);
        $this->assertEquals(strtotime('Jan 2') + (4*60*60), $range[1]);

        // Should honor Daylight Savings Time
        $range = CTDateTime::getRangeWithInterval('March 11, 2012', 'PT4H', 'America/Chicago');
        $this->assertEquals(strtotime('March 11, 2012'), $range[0]);
        $this->assertEquals(strtotime('March 11, 2012') + (3*60*60), $range[1]);

        // Should honor Daylight Savings Time
        $range = CTDateTime::getRangeWithInterval('Nov 4, 2012', 'PT4H', 'America/Chicago');
        $this->assertEquals(strtotime('Nov 4, 2012'), $range[0]);
        $this->assertEquals(strtotime('Nov 4, 2012') + (5*60*60), $range[1]);

        date_default_timezone_set($tz);
    }
}
